TablePanel {
/****************
		DESCRIZIONE sticky table x entità definita nel metodo init
		UTILIZZO	invocare init passando il parametro entity e datarow
*****************************/		
	
	/*
	 * Attributes
	 */
	Config.ScreenConfiguration scrConfig=new Config.ScreenConfiguration(); 	
	DataRow currentRow=null;
	StickyTable stk = new StickyTable();
	
	//ObjectMap cellDataArray=new ObjectMap();
	ObjectArray arrObj=new ObjectArray();
	
	//RowSetModel rsm = new RowSetModel();
	MultiRowSetModel mrsm ;
	
	String Entity="";
		
	ObjectArray sectionLabelArray;
	ObjectMap entityFieldMap;
	
	/*
	 * Callback methods
	 */
	callback onCreate(Container c) {
	
		stk.setGridLineThickness(1);
		stk.setGridLineStyle(LineStyle.SOLID);
		stk.setGridLineColor(Colors.Gray);
		
		//set size (note: this is required)
		setRowHeight(0, Sizing.PREFERRED, 1);
		
		//add sticky table to screen
		add(stk, "halign=center");
		setColumnWidth(0,Sizing.PIXELS,(int) (0.8*Device.getScreenHeight()));					
	
	}
	
	///////////////////////////////
	// Callback to configure cells
	///////////////////////////////
	callback stk onCellCreateInfo(TableView c, TableViewCellCreateInfo info, int group, int row){		
	//cell
		Cells.EditFormDetailCell cell=new Cells.EditFormDetailCell();				
		cell.init("Label","");					
		info.setPanel(cell);			
		
	}
	
	callback stk onCellInfo(TableView c , TableViewCell cell , Cell info , int grp , int row ){
		Panels.Cells.EditFormDetailCell tblVwCell = (Panels.Cells.EditFormDetailCell) cell;
		DataRow sectionFieldRow=info.getDataRow();
		//get field property
		//ObjectMap propertyMap=scrConfig.getProperty(sectionFieldRow);
		
		//get field property
		String caption=cfg.Caption.getStringValue(sectionFieldRow);				
		String fieldName=cfg.Field.getStringValue(sectionFieldRow);
		String fieldType=cfg.FieldType.getStringValue(sectionFieldRow);				
		
		DataAttribute att=(DataAttribute)entityFieldMap.getValue(fieldName);
		appLog.log(Log.INFO,"attribute "+att.getName());
		//read only
		boolean readOnly=cfg.ReadOnly.getBooleanValue(sectionFieldRow).booleanValue();
				
	//inizializzo cella
		tblVwCell.setRow(currentRow);		
		//popolo la cella
		/*tblVwCell.label.setText((String)propertyMap.getValue("Caption") );							
		tblVwCell.model.addField((DataAttribute)propertyMap.getValue("Attribute"));
		Boolean readOnly=(Boolean)propertyMap.getValue("ReadOnly");
		tblVwCell.model.setEditable(!readOnly.booleanValue());
			*/
				
		tblVwCell.label.setText(caption );							
		tblVwCell.model.addField(att);			
				
		appLog.log(Log.INFO,"model loaded"+att.getName());
		tblVwCell.model.setEditable(!readOnly); 				
											
	}
	
	callback stk onCellConfigure(TableView c, CellConfig cell, int group){
		cell.setHeight(Sizing.PREFERRED, 0);
		cell.setWidth(Sizing.PIXELS, 400);
		cell.setCouldBeSelected(true);
	}
	
	callback stk onCellSize(TableView c, AbsoluteSize sizeInfo, int group, int row){
		sizeInfo.setHeight(60);		
	}		
	
	callback stk onSelectionChanged ( TableView c , int group , int row ) {	
		
	}
		
	////////////////////////////
	// Sticky Header (Optional)
	////////////////////////////
	callback stk onHeaderCreateInfo(TableView c, TableViewPanelCreateInfo info, int group){
		//info.setPanel(new Panels.Accounts.AccountHeaderTableViewPanel());
		//info.setPanel(new Panels.SectionHeader.EditHeaderSectionTPV());
		
		
		TableViewPanel headerCell=new TableViewPanel();
		
		Label lblTitle=new Label();
		if(sectionLabelArray!=null){
			String  strTitle=(String)sectionLabelArray.getItem(group);		
			lblTitle.setText(strTitle);	
		}	
		headerCell.add(lblTitle,"halign=center");
		
		info.setPanel(headerCell);
	}
	
	callback stk onHeaderConfigure(TableView c, CellConfig cell, int group){
		cell.setCouldBeSelected(false);
		cell.setHeight(Sizing.PIXELS, 60);
		cell.setWidth(Sizing.PERCENTS, 70);
	}
	
	callback stk onHeaderInfo(TableView c, TableViewPanel cell, Header info, int grp) {
		cell.setBackground(Background.createVerticalGradientRectangleBackground(Colors.LightGray, Colors.LightGray));
		
	}		
		
	////////////////////////////
	// Footer (Optional)
	////////////////////////////
	callback stk onFooterCreateInfo(TableView c, TableViewPanelCreateInfo info, int group){
		//info.setPanel(new Panels.Accounts.AccountFooterTableViewPanel());
	}
	
	callback stk onFooterConfigure(TableView c, CellConfig cell, int group){
		cell.setCouldBeSelected(false);
		cell.setHeight(Sizing.PIXELS, 60);
		cell.setWidth(Sizing.PERCENTS, 100);
	}
	
	callback stk onFooterInfo(TableView c, TableViewPanel cell, Footer info, int grp) {
		/*Panels.Accounts.AccountFooterTableViewPanel tblVwPanelFooter = (Panels.Accounts.AccountFooterTableViewPanel) cell;
		tblVwPanelFooter.setRowCount(rsm.getRowCount(0));
		*/
	}
	
	
	/*
	 * Custom methods
	 */
	void init(String entity,DataRow row){
		currentRow=row;
		//Entity=entity;
		entityFieldMap=(ObjectMap)fieldMap.getValue(entity);
		sectionLabelArray=(ObjectArray) sectionLabelMap.getValue(entity);
		
		mrsm=scrConfig.createMultiRowSet(entity);
				
		int NSECTION=mrsm.getGroupCount();
		appLog.log(Log.INFO,"GROUPCOUNT "+NSECTION);
		stk.setNumberOfGroups(NSECTION);
		
		//set the model for the sticky table
		stk.setDataModel(mrsm);						
		
		
	}
	void setRow(DataRow row){
		//appLog.log(Log.INFO,"cella selezionata ricarico i dati nuovi");
		currentRow=row;
		stk.reload();
		//init("Account",row);
	}
	
}
