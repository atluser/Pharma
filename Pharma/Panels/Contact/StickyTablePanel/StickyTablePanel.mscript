TablePanel {

	/*
	 *
	 */	
	String sAccountCode = ""; 
	 	
	Label lbl = new Label();
	
	Array arr = new Array();
	
	SearchField src = new SearchField();
	StickyTable stk = new StickyTable();
	//RowSetModel rsm = new RowSetModel();
	Panels.DetailPanel pnlDetail;
	MultiRowSetModel mrsm = new MultiRowSetModel();
	
	BackgroundButton btnClearSearch = new BackgroundButton();
	String fill = "hfill=fill, vfill=fill";

	Panels.Contact.ReadOnlyDetailFormPanel pnlDetailForm;
	Panels.IndexPanel pnlIndex = new Panels.IndexPanel();
	
	int iRowCount = 0;
	Label lblRowCount = new Label();
	
	/*
	 *
	 */
	callback onCreate(Container c) {
		
		pnlIndex.setStickyTable(stk);
		pnlIndex.setArray(arr);
		
		setQuery();
		setUpButtons();
		
		//stk.setDataModel(rsm);
		stk.setDataModel(mrsm);
		stk.setGridLineThickness(1);
		stk.setGridLineStyle(LineStyle.SOLID);
		stk.setGridLineColor(Colors.Gray);
		setColumnWidth(0, Sizing.PERCENTS, 25);
		
		Font fnt = new Font();
		fnt.setSize(18);
		fnt.setFamily("Arial");
		
		src.setFont(fnt);
		src.setTextHint("Search...");
		src.setFocusedForeColor(Color.create(58,58,58));
		src.setDisabledForeColor(Color.create(58,58,58));
		src.setBackColor(Colors.White);
		
		TablePanel pnl = new TablePanel();
		PictureBox picBoxSearch = new PictureBox();
		picBoxSearch.setImage(Images.Buttons.BTN_32x32_SEARCH_u.getImage());
		//pnl.setInsets(0,8,0,0);
		pnl.setRowHeight(0, Sizing.PIXELS, 48);
		pnl.setColumnWidth(0, Sizing.PIXELS, 48);
		pnl.setColumnWidth(1, Sizing.PIXELS, 250);
		pnl.setColumnWidth(2, Sizing.PIXELS, 48);
		pnl.setBackground(Background.createHorizontalTiledImageRectangleBackground(Images.Backgrounds.BCK_SEARCH.getImage(),5,5));
		//pnl.setBackColor(Colors.White);
		pnl.add(picBoxSearch,fill);
		pnl.add(src,"hfill=fill");
		pnl.add(btnClearSearch,fill);
		
		add(pnl, "hfill=fill, valign=top");
		
		startNewRow();
		add(stk, "hfill=fill,vfill=fill");
		add(pnlIndex, "hfill=fill,valign=top");	
		
		setInsets(8,8,8,8);
		setBackground(Background.create9PartImageRectangleBackground(Images.SplitViewImages.ImgMasterBackground, 0, 0, 0, 0));
		
		//set size (note: this is required)
		setColumnWidth(0, Sizing.PIXELS, 360);
		setColumnWidth(1, Sizing.PREFERRED,0);
		setRowHeight(0, Sizing.PREFERRED, 0);
		setRowHeight(1, Sizing.PREFERRED, 1);	
		setRowHeight(2, Sizing.PREFERRED, 0);	
		
		/*	stk.scrollTo(0,0,StickyTable.SCROLL_POSITION_TOP);
		 *	stk.select(0,0);
		 *	logApp.log(Log.INFO, "ContactStickyTablePanel::onCreate - Row 0,0 selected: "+ vObjContact.ContactName.getStringValue(mrsm.getRow()));
		 *	pnlDetail.txtFldName.setText(vObjContact.ContactName.getStringValue(mrsm.getRow()) + " " + vObjContact.ContactLastName.getStringValue(mrsm.getRow()));
		 *	pnlDetailForm.setRow(mrsm.getRow());
		*/
		//stk.select(1,1);
		//stk.select(0,0);		
		
	}
	
	///////////////////////////////
	// Callback to configure cells
	///////////////////////////////
	callback stk onCellCreateInfo(TableView c, TableViewCellCreateInfo info, int group, int row){
		info.setPanel(new Cells.TwoRowsTableViewCell());
	}
	
	callback stk onCellInfo(TableView c , TableViewCell cell , Cell info , int grp , int row ){
		//Panels.AccountTableViewCell tblVwCell = (Panels.AccountTableViewCell) cell;
		//tblVwCell.populateData(info.getDataRow());
		
		//Panels.Contacts.ContactTableViewCell tblVwCell = (Panels.Contacts.ContactTableViewCell) cell;
		//tblVwCell.setRow(info.getDataRow());

		//tblViewCell = new TableViewCell();
		//tblViewCell = cell;
		Cells.TwoRowsTableViewCell tblVwCell = (Cells.TwoRowsTableViewCell)cell;
		
		DataRow dtRw = info.getDataRow();
		if(!dtRw.isDeleted()){		
			String str01 = vObjContact.ContactLastName.getStringValue(dtRw) + " " + vObjContact.ContactName.getStringValue(dtRw);
			str01 = str01.toUpperCase();
			String str02 = vObjContact.ContactEmail.getStringValue(dtRw);					
	
			tblVwCell.lbl01.setText(str01);
			tblVwCell.lbl02.setText(str02);
		}
		
	}
	
	callback stk onCellConfigure(TableView c, CellConfig cell, int group){
		cell.setHeight(Sizing.PREFERRED, 0);
		cell.setWidth(Sizing.PREFERRED, 0);
		cell.setCouldBeSelected(true);
	}
	
	callback stk onCellSize(TableView c, AbsoluteSize sizeInfo, int group, int row){
		sizeInfo.setHeight(60);
	}		
	
	callback stk onSelectionChanged ( TableView c , int group , int row ) {	
		logApp.log(Log.INFO, "ContactStickyTablePanel::onSelectionChanged - Row: "+ row);
		pnlDetail.txtFldName.setText(vObjContact.ContactName.getStringValue(mrsm.getRow()) + " " + vObjContact.ContactLastName.getStringValue(mrsm.getRow()));
		pnlDetailForm.setRow(mrsm.getRow());
	}
		
	////////////////////////////
	// Sticky Header (Optional)
	////////////////////////////
	callback stk onHeaderCreateInfo(TableView c, TableViewPanelCreateInfo info, int group){
		//info.setPanel(new Panels.AccountHeaderTableViewPanel());
		 Cells.SectionHeaderCell header=new Cells.SectionHeaderCell();
			header.enableDirectionalScroll(true); 
			//header.lbl.setText(letterList.getItem(group));
			info.setPanel(header); 
	}
	
	callback stk onHeaderConfigure(TableView c, CellConfig cell, int group){
		 cell.setCouldBeSelected(false);		
		cell.setHeight(Sizing.PIXELS, 30);
		//cell.setHeight(Sizing.PREFERRED, 0);
		cell.setWidth(Sizing.PERCENTS, 100); 
	}
	
	callback stk onHeaderInfo(TableView c, TableViewPanel cell, Header info, int grp) {
		Cells.SectionHeaderCell header = (Cells.SectionHeaderCell)cell;
		if(grp<arr.length()){
			header.lbl.setText(arr.getItem(grp));				
			appLog.log(Log.INFO,"CONTACT Header lecter section "+grp+" "+arr.getItem(grp));
		}
	}		
		
	////////////////////////////
	// Footer (Optional)
	////////////////////////////
	callback stk onFooterCreateInfo(TableView c, TableViewPanelCreateInfo info, int group){
		/*
		TableViewPanel pnlFooter = new TableViewPanel();
		pnlFooter.add(lbl,"halign=center,valign=center");
		
		info.setPanel(pnlFooter);
		*/
	}
	
	callback stk onFooterConfigure(TableView c, CellConfig cell, int group){
		/*
		cell.setCouldBeSelected(false);
		cell.setHeight(Sizing.PIXELS, 60);
		cell.setWidth(Sizing.PERCENTS, 100);
		*/
	}
	
	callback stk onFooterInfo(TableView c, TableViewPanel cell, Footer info, int grp) {
		//cell.setBackground(Background.createVerticalGradientRectangleBackground(Colors.DarkGray, Colors.DarkGray));
	}
	
	callback src onValueChange (Control c) {
		src.setOnValueChangingPausedDelay(500);
	}
	
	callback src onValueChangingPaused(Control c){
		setQuery(src.getText());	
		stk.reload();
		if (mrsm.getRowCount(0)>0) {
			stk.select(0,0);
			pnlDetail.txtFldName.setText(vObjContact.ContactName.getStringValue(mrsm.getRow()) + " " + vObjContact.ContactLastName.getStringValue(mrsm.getRow()));
			pnlDetailForm.setRow(mrsm.getRow());
		}
		
	}	
	
	callback btnClearSearch onClick(Control c) {
		src.setText("")	;	
		//pnlDetail.setQuery();
		setQuery();
		stk.reload();
		if (mrsm.getRowCount(0)>0) {
			stk.select(0,0);
			pnlDetail.txtFldName.setText(vObjContact.ContactName.getStringValue(mrsm.getRow()));
			pnlDetailForm.setRow(mrsm.getRow());
		}
		//iRowCount = pnlDetail.getRowCount();
		switch(iRowCount) {
			
			case 0:
				lblRowCount.setText("No Accounts");
				break;
			case 1:	
				lblRowCount.setText("" + iRowCount + " Account/s");
				break;
			default:
				lblRowCount.setText("" + iRowCount + " Account/s");
		}
	}
	
	/*
	 * Custom methods
	 */
	void setQuery() {
		arr.removeAllItems();
		mrsm.clear();
		for(int i = 0; i < letterList.length(); i++) {
			RowSetModel rsm1 = new RowSetModel();
			if (sAccountCode != "") {
				rsm1.setRows(vObjContact.getContactStartsWithFromAccount(letterList.getItem(i),sAccountCode));
				}
			else { 
				rsm1.setRows(vObjContact.getContactStartsWith(letterList.getItem(i)));
			}
			
			if(rsm1.getRowCount(0) > 0) {
				
				mrsm.add(rsm1);
				arr.insertItem(mrsm.getGroupCount() - 1, letterList.getItem(i));	
				pnlIndex.enableIndexLinks(i);	
			}
		}
		arr.insertItem(mrsm.getGroupCount() , "");
		stk.setNumberOfGroups(mrsm.getGroupCount());	
	} 
	 
	void setQuery(String str) {
		arr.removeAllItems();
		mrsm.clear();
		for(int i = 0; i < letterList.length(); i++) {
			RowSetModel rsm1 = new RowSetModel();
			if (sAccountCode != "") {
				rsm1.setRows(vObjContact.getContactContainsStartsWithFromAccount(letterList.getItem(i),str,sAccountCode));
				}
			else { 
				rsm1.setRows(vObjContact.getContactContainsStartsWith(letterList.getItem(i),str));
			}
			
			if(rsm1.getRowCount(0) > 0) {
				
				mrsm.add(rsm1);
				arr.insertItem(mrsm.getGroupCount() - 1, letterList.getItem(i));	
				pnlIndex.enableIndexLinks(i);	
			}
		}
		stk.setNumberOfGroups(mrsm.getGroupCount());	
	} 
	
	void setUpButtons() {
		btnClearSearch.setImage(Images.Buttons.BTN_CANCEL_u.getImage());
		btnClearSearch.setFocusedImage(Images.Buttons.BTN_CANCEL_s.getImage());
		btnClearSearch.setSelectedImage(Images.Buttons.BTN_CANCEL_s.getImage());	
	}
	
	void setAccountCode(String str) {
		sAccountCode = str;
	}
	
	String getAccountCode() {
		return sAccountCode;
	}

	void setDetailPanel(Panels.DetailPanel pnl) {
		pnlDetail = pnl;
	}
	
	void setDetailFormPanel(Panels.Contact.ReadOnlyDetailFormPanel pnl) {
		pnlDetailForm = pnl;
	}
		
}