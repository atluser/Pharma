TablePanel {

	/*
	 *
	 */	
	String sAccountCode = ""; 
	 	
	Label lbl = new Label();
	
	SearchField src = new SearchField();
	StickyTable stk = new StickyTable();
	RowSetModel rsm = new RowSetModel();

	Panels.Order.ReadOnlyDetailTablePanel pnlDetail;

	/*
	 *
	 */
	callback onCreate(Container c) {
		
		setQuery();
		
		stk.setDataModel(rsm);
		stk.setGridLineThickness(1);
		stk.setGridLineStyle(LineStyle.SOLID);
		stk.setGridLineColor(Colors.Gray);
		
		src.setTextHint("Search...");
		//src.setBackColor(Colors.Gray);
		
		add(src, "hfill=fill");
		startNewRow();
		add(stk, "hfill=fill,vfill=fill");
		
		setInsets(8,8,8,8);
		setBackground(Background.create9PartImageRectangleBackground(Images.SplitViewImages.ImgMasterBackground, 0, 0, 0, 0));
		
		//set size (note: this is required)
		setColumnWidth(0, Sizing.PREFERRED, 1);
		setRowHeight(0, Sizing.PREFERRED, 0);
		setRowHeight(1, Sizing.PREFERRED, 1);		
		
	}
	
	///////////////////////////////
	// Callback to configure cells
	///////////////////////////////
	callback stk onCellCreateInfo(TableView c, TableViewCellCreateInfo info, int group, int row){
		info.setPanel(new Cells.TwoRowsTwoColsTableViewCell());
	}
	
	callback stk onCellInfo(TableView c , TableViewCell cell , Cell info , int grp , int row ){
		//Panels.AccountTableViewCell tblVwCell = (Panels.AccountTableViewCell) cell;
		//tblVwCell.populateData(info.getDataRow());
		
		Cells.TwoRowsTwoColsTableViewCell tblVwCell = (Cells.TwoRowsTwoColsTableViewCell)cell;
		
		DataRow dtRw = info.getDataRow();
		if(!dtRw.isDeleted()){
			/*		
			String str01 = vObjOrder.OrderCode.getStringValue(dtRw);
			String str02 = vObjOrder.OrderStatus.getStringValue(dtRw);					
			String str03 = vObjOrder.OrderDate.getDateValue(dtRw);	
			*/
			String str01 = (vObjOrder.OrderCode.getStringValue(dtRw) != null) ? vObjOrder.OrderCode.getStringValue(dtRw) : "Data not found!";
			String str02 = (vObjOrder.OrderStatus.getStringValue(dtRw) != null) ? vObjOrder.OrderStatus.getStringValue(dtRw) : "Data not found!";
			String str03 = (vObjOrder.OrderDate.getDateValue(dtRw) != null) ? vObjOrder.OrderDate.getDateValue(dtRw).toString() : "Data not found!";
			
			if(vObjOrder.OrderDate.getDateValue(dtRw) != null) {
				str03 = getFormattedDate(vObjOrder.OrderDate, dtRw);	
			}
			
			tblVwCell.lbl01.setText(str01);
			tblVwCell.lbl02.setText(str02);
			tblVwCell.lbl03.setText(str03);
		}
		
	}
	
	callback stk onCellConfigure(TableView c, CellConfig cell, int group){
		cell.setHeight(Sizing.PREFERRED, 0);
		cell.setWidth(Sizing.PREFERRED, 0);
		cell.setCouldBeSelected(true);
	}
	
	callback stk onCellSize(TableView c, AbsoluteSize sizeInfo, int group, int row){
		sizeInfo.setHeight(60);
	}		
	
	callback stk onSelectionChanged ( TableView c , int group , int row ) {	
		logApp.log(Log.INFO, "AccountStickyTablePanel::onSelectionChanged - Row: "+ row);
		pnlDetail.setRow(rsm.getRow());
	}
		
	////////////////////////////
	// Sticky Header (Optional)
	////////////////////////////
	callback stk onHeaderCreateInfo(TableView c, TableViewPanelCreateInfo info, int group){
		//info.setPanel(new Panels.AccountHeaderTableViewPanel());
	}
	
	callback stk onHeaderConfigure(TableView c, CellConfig cell, int group){
		//cell.setCouldBeSelected(false);
		//cell.setHeight(Sizing.PIXELS, 60);
		//cell.setWidth(Sizing.PERCENTS, 100);
	}
	
	callback stk onHeaderInfo(TableView c, TableViewPanel cell, Header info, int grp) {
		//cell.setBackground(Background.createVerticalGradientRectangleBackground(Colors.LightGray, Colors.LightGray));
	}		
		
	////////////////////////////
	// Footer (Optional)
	////////////////////////////
	callback stk onFooterCreateInfo(TableView c, TableViewPanelCreateInfo info, int group){
		/*
		TableViewPanel pnlFooter = new TableViewPanel();
		pnlFooter.add(lbl,"halign=center,valign=center");
		
		info.setPanel(pnlFooter);
		*/
	}
	
	callback stk onFooterConfigure(TableView c, CellConfig cell, int group){
		/*
		cell.setCouldBeSelected(false);
		cell.setHeight(Sizing.PIXELS, 60);
		cell.setWidth(Sizing.PERCENTS, 100);
		*/
	}
	
	callback stk onFooterInfo(TableView c, TableViewPanel cell, Footer info, int grp) {
		//cell.setBackground(Background.createVerticalGradientRectangleBackground(Colors.DarkGray, Colors.DarkGray));
	}
	
	callback src onValueChange (Control c) {
		src.setOnValueChangingPausedDelay(500);
	}
	
	callback src onValueChangingPaused(Control c){
		
		String str = getAccountCode();
		
		if(str != "") {
			setQuery(str,src.getText());
		} else {
			setQuery(src.getText());
		}		
		stk.reload();
		
	}	
	
	/*
	 * Custom methods
	 */
	void setQuery() {
		rsm.setRows(vObjOrder.getOrders());
		//lbl.setText(" " + vObjOrder.getOrders().getRowSet().getSize() + "Records");
	} 
	 
	void setQuery(String str) {
		rsm.setRows(vObjOrder.getOrderContains(str));
		//lbl.setText(" " + vObjOrder.getOrderContains(str).getRowSet().getSize() + "Records");
	} 
	
	void setQuery(String str01, String str02) {
		rsm.setRows(vObjOrder.getOrderContains(str01, str02));
		//lbl.setText(" " + vObjOrder.getOrderContains(str01, str02).getRowSet().getSize() + "Records");
	}
	  
	void setDetailPanel(Panels.Order.ReadOnlyDetailTablePanel pnl) {
		pnlDetail = pnl;
	}
	
	String getFormattedDate(DateAttribute dtAtt, DataRow dtRw) {
		
		/*
		Date startDate=vObjPriceList.PriceListStartDate.getDateValue(dtRw);
		int m=startDate.month();
		int d=startDate.day();
		int y=startDate.year();
		strStartDate=""+d+"/"+m+"/"+y;
		*/
		
		DateFormatModel dtFormat = new DateFormatModel();
		dtFormat.setStyle(DateStyles.DATE_MEDIUM);
		dtFormat.addField(dtAtt);
		dtFormat.setRow(dtRw);
		
		return dtFormat.getText();
		
	} 
	
	void setAccountCode(String str) {
		sAccountCode = str;
	}
	
	String getAccountCode() {
		return sAccountCode;
	}
		
}

