TablePanel {
	
	MapField mapField = new MapField();
	String fill="hfill=fill, vfill=fill";
	
	LocationManager loc = new LocationManager();
	Navigator nav = Navigator.getNavigatorInstance();
	
	RowSetModel rsm;
	
	//is an array of 2 strings [contactName+lastName,latitude,longitude]
	Array lastSearchedLocation = new Array();
	
	Array visitPlan = new Array();
	Array visitPlanDistances = new Array();
	Array allPoints = new Array();
	
	boolean enabled;
	
	Panels.MapView.StickyTablePanel stk;
	Panels.MapView.RootTablePanel pnlRoot;
	
	//my position
	double myLat = 0;
	double myLon = 0;
	
	callback onCreate(Container c) {
		
		setRowHeight(0,Sizing.PREFERRED,1);
		setColumnWidth(0,Sizing.PREFERRED,1);
		
		loc.startLocationUpdate(); 
		lastSearchedLocation.removeAllItems();
		//rsm.setRows(dpObjContact.getContactStartsWithHasValidAddress());
		stk.setMapPanel((Panels.MapView.MapPanel)c);
		initMap();
	}
	
	void setRowSetModel (RowSetModel mdl) {
		rsm=mdl;
		initMap();
	}
	
	//create the initial map that you can see after open screen 
	void initMap() {
		mapField.clearLocations();
		//addAllLocations();
		add(mapField,fill);
	}
	
	//adds all the queried locations on the map field
	void addAllLocations() {
		mapField.startBatchAdd();
		for (int j=0;j<rsm.getGroupCount();j++) {
			for (int i=0; i<rsm.getRowCount(j); i++) {
				rsm.select(j,i);
				DataRow row = rsm.getRow();
				addSingleLocation(row,Images.Maps.PIN.getImage(), 0, 0);	
			}
		}
		mapField.endBatchAdd();
		pnlRoot.lblTitle.setText("Tutte le locazioni");
	}
	
	
	//adds a single location on the mapfield
	void addSingleLocation(DataRow row, Image annotImage,double latitude, double longitude) {
		
		MapAnnotation mapAnot = new MapAnnotation();
		if (row!=null) {
			mapAnot.setEnabled(true);
			mapAnot.setShowCallout(true);
			mapAnot.setTitle(dpObjContact.ContactName.getStringValue(row) + " " + dpObjContact.ContactLastName.getStringValue(row));
			mapAnot.setSubTitle(dpObjContact.ContactStreetAddress.getStringValue(row) + " - " + dpObjContact.ContactStreetCity.getStringValue(row));
		} else {
			mapAnot.setEnabled(false);
			mapAnot.setShowCallout(false);
		}
		if (annotImage!=null) {
			mapAnot.setImageType(MapAnnotation.IMAGE_TYPE_RESOURCED);
			mapAnot.setImage(annotImage);
		} else {
			mapAnot.setImageType(MapAnnotation.IMAGE_TYPE_DEFAULT);
		}
		mapAnot.setShowCallout(true);
		if ((latitude!=0)&&(longitude!=0)) {
			mapField.addLocation(latitude,longitude,mapAnot);
		} else {
			//it means that i have the data row
			mapField.addLocation(dpObjContact.ContactStreetAddress.getStringValue(row),"",dpObjContact.ContactStreetCity.getStringValue(row),dpObjContact.ContactCap.getStringValue(row),dpObjContact.ContactCountry.getStringValue(row),mapAnot);
			
			//now remind what i have searched to give the distance between this position and my position
			lastSearchedLocation.removeAllItems();
			String address = dpObjContact.ContactStreetAddress.getStringValue(row) + " " + dpObjContact.ContactStreetCity.getStringValue(row);
			logApp.log(Log.INFO, "Coordinates - lastSearched address - " + address);
			String lat = Platform.toString(nav.getLatitude(address));
			String lon = Platform.toString(nav.getLongitude(address));
			logApp.log(Log.INFO, "Coordinates - lastSearched address - " + lat + " " + lon);
			lastSearchedLocation.addItem(dpObjContact.ContactName.getStringValue(row) + " " + dpObjContact.ContactLastName.getStringValue(row));
			lastSearchedLocation.addItem(lat);
			lastSearchedLocation.addItem(lon);
		}
		
	}
	
	void addMyPosition() {
		if (loc.isLocationServicesEnabled()==true) {
			loc.setAccuracy(LocationManager.LOCATION_ACCURACY_BEST);
			logApp.log(Log.INFO,"Coordinates - Accuracy setted");
			loc.setFrequency(LocationManager.UPDATE_FREQUENCY_LIVE);
			logApp.log(Log.INFO,"Coordinates - Starting location update...");
			
			//repeat until we have a valid location
			while (loc.getLocation()==null) {}
			
			Location position = loc.getLocation();
			logApp.log(Log.INFO,"Coordinates - Location getted");
			myLat = position.getLatitude();
			myLon = position.getLongitude();
			String address=nav.getAddress(myLat,myLon);
			logApp.log(Log.INFO,"Coordinates - extension address:" + address);
			logApp.log(Log.INFO,"Coordinates - getted");
			logApp.log(Log.INFO,"Coordinates - Latitide: " + myLat);
			logApp.log(Log.INFO,"Coordinates - Longitude: " + myLon);
			addSingleLocation(null,Images.Maps.YOU_ARE_HERE.getImage(),myLat,myLon);
			
			//calculate the distance between my position and last point searched (if exist)
			if (lastSearchedLocation.length()>0) {
				double latDest = Platform.parseDouble(lastSearchedLocation.getItem(1));
				double lonDest = Platform.parseDouble(lastSearchedLocation.getItem(2));
				float dist = nav.getDistance(myLat,myLon,latDest,lonDest);
				pnlRoot.lblTitle.setText("Tu sei in:     " + address + "  e disti " + dist + " metri da " + lastSearchedLocation.getItem(0));
			} else {
				pnlRoot.lblTitle.setText("Tu sei in:     " + address);
			}
		} else {
			logApp.log(Log.INFO, "Coordinates - Device is not enabled");
			MessageBox msg = new MessageBox();
			msg.info(1,"Il device non è abilitato per il fix GPS. Prego, attivare il GPS per avere questa funzionalità.");
		}
	}
	
	void setStickyTable(Panels.MapView.StickyTablePanel pnl) {
		stk=pnl;
	}

	void setRootPanel(Panels.MapView.RootTablePanel pnl) {
		pnlRoot=pnl;
	}
	
	void getVisitPlan() {
		//array that contains IDs of the loacations
		Array toVisit = new Array();
		Array goTo = new Array();
		String lat = "";
		String lon = "";
		
		visitPlan.removeAllItems();
		//load all contacts into array
		toVisit = getRowSetIDs(rsm);
		//logApp.log(Log.INFO,"VisitPlan - TOVISIT length:" + toVisit.length());
		
		while (toVisit.length()>0) {
			if (goTo.length()>0) {
				//in goTo(0) we have the row ID, in 1 and 2 we ave latitude and longitude
				lat=goTo.getItem(1);
				lon=goTo.getItem(2);
				goTo.removeAllItems();
				goTo = calcNearest(toVisit,Platform.parseDouble(lat),Platform.parseDouble(lon));
				//logApp.log(Log.INFO,"VisitPlan - Location added");
			} else {
				//it means that is the first cicle and we have to calculate the distance from my position
				goTo = calcNearest(toVisit,myLat,myLon);
			}
			visitPlan.addItem(goTo.getItem(0));
			//logApp.log(Log.INFO,"VisitPlan - Item added");
			toVisit.removeItem(goTo.getItem(0));
			//logApp.log(Log.INFO,"VisitPlan - toVisit - Item removed");
		}
		
		RowSetModel rmodel = new RowSetModel();
		//we will use toVisit array to pass to the popup
		toVisit.removeAllItems();
		for (int i=0; i<visitPlan.length();i++) {
			rmodel.setRows(dpObjContact.getContactRow(visitPlan.getItem(i)));
			rmodel.select(0,0);
			DataRow row = rmodel.getRow();
			//logApp.log(Log.INFO, "VisitPlan - go to: " + dpObjContact.ContactLastName.getStringValue(row) + " " + dpObjContact.ContactName.getStringValue(row));
			toVisit.addItem(dpObjContact.ContactLastName.getStringValue(row) + " " + dpObjContact.ContactName.getStringValue(row));
		}
		
		Popups.VisitPlanPopup vpPopup = new Popups.VisitPlanPopup();
		vpPopup.setDistArray(visitPlanDistances);
		vpPopup.setArray(toVisit);
		scrMap.showPopup(vpPopup,Popup.POPUP_TYPE_NONE,Sizing.PREFERRED,0,Sizing.PREFERRED,0,false,true);
	}
	
	void getVisitPlanV2() {
		Array toVisitInQuadrant = new Array();
		Array nearestFirst = new Array();
		Array goTo = new Array();
		RowSetModel rmodel = new RowSetModel();
		int quadrant;
		int quadrantCount = 0;
		
		visitPlan.removeAllItems();
		allPoints.removeAllItems();
		
		allPoints = getRowSetIDs(rsm);
		
		Array qPlan = new Array();
		while ((allPoints.length()>0)) {
			if (quadrantCount==0) {
				qPlan = getInQuadrantPlan(myLat,myLon);
			} else {
				qPlan = getInQuadrantPlan(Platform.parseDouble(nearestFirst.getItem(0)),Platform.parseDouble(nearestFirst.getItem(1)));
				allPoints = rmArrayFromArray(allPoints,qPlan);
			}
			quadrantCount++;
			//allPoints = rmArrayFromArray(allPoints,qPlan);
			logApp.log(Log.INFO,"visitplan - points to remove from allPoints "+ qPlan.length());
			logApp.log(Log.INFO,"visitplan - points remained "+ allPoints.length());
			visitPlan = addArrayToArray(visitPlan,qPlan);
			logApp.log(Log.INFO,"visitplan - points in visit plan "+ visitPlan.length());
			rmodel.setRows(dpObjContact.getContactRow(qPlan.getItem(qPlan.length()-1)));
			rmodel.select(0,0);    //i have always only one element in the model because i take that by ID
			DataRow row = rmodel.getRow();
			nearestFirst.removeAllItems();
			nearestFirst = getPointCoordinates(row); 
		}
		
		RowSetModel model = new RowSetModel();
		allPoints.removeAllItems();
		//we will use toVisit array to pass to the popup
		for (int i=0; i<visitPlan.length();i++) {
			model.setRows(dpObjContact.getContactRow(visitPlan.getItem(i)));
			model.select(0,0);
			DataRow row = model.getRow();
			//logApp.log(Log.INFO, "VisitPlan - go to: " + dpObjContact.ContactLastName.getStringValue(row) + " " + dpObjContact.ContactName.getStringValue(row));
			allPoints.addItem(dpObjContact.ContactLastName.getStringValue(row) + " " + dpObjContact.ContactName.getStringValue(row));
		}
		
		Popups.VisitPlanPopup vpPopup = new Popups.VisitPlanPopup();
		vpPopup.setDistArray(visitPlanDistances);
		vpPopup.setArray(allPoints);
		scrMap.showPopup(vpPopup,Popup.POPUP_TYPE_NONE,Sizing.PREFERRED,0,Sizing.PREFERRED,0,false,true);
	}
	
	//calculate the nearest point into an array of locations from a start location [pointId,latitude,longitude]
	Array calcNearest(Array arr, double startLat, double startLon) {
		Array nearestPoint = new Array();
		
		String nearestId = "";
		String address = "";
		float nearest = 0;
		float dist = 0;
		RowSetModel rmodel = new RowSetModel();
		double curLat = 0;
		double curLon = 0;
		Array coordinates = new Array();
		
		for (int i=0; i<arr.length(); i++) {
			//logApp.log(Log.INFO, "VisitPlan - entro nel ciclo");
			rmodel.setRows(dpObjContact.getContactRow(arr.getItem(i)));
			rmodel.select(0,0);    //i have always only one element in the model because i take that by ID
			DataRow row = rmodel.getRow();
			coordinates.removeAllItems();
			coordinates = getPointCoordinates(row);
			dist = nav.getDistance(startLat,startLon,Platform.parseDouble(coordinates.getItem(0)),Platform.parseDouble(coordinates.getItem(1)));
			logApp.log(Log.INFO, "VisitPlan - distance getted: " + dist);
			if (nearest==0) {
				nearest=dist;
				nearestId = dpObjContact.ContactId.getStringValue(row);
				nearestPoint.removeAllItems();
				nearestPoint.addItem(nearestId);
				nearestPoint.addItem(coordinates.getItem(0));
				nearestPoint.addItem(coordinates.getItem(1));
			} else {
				if (dist<nearest) { 
					nearest=dist;
					nearestId = dpObjContact.ContactId.getStringValue(row);
					nearestPoint.removeAllItems();
					
					nearestPoint.addItem(nearestId);
					nearestPoint.addItem(coordinates.getItem(0));
					nearestPoint.addItem(coordinates.getItem(1));
				
				}
			}
		}
		
		//add this line if you use V1
		visitPlanDistances.addItem(Platform.toString(nearest));
		
		
		//logApp.log(Log.INFO, "VisitPlan - ho un nearest point: " + nearestPoint.getItem(0));
		return nearestPoint;
	}
	
	/* this function returns all points in a quadrant [0,1,2,3] given a group of points given as (0,0) center a point whith 
	 * latitude and longitude coordinates
	*/
	Array pointsInQuadrant(Array points, int quadrant,double latitude, double longitude) {
		Array inQuadrant = new Array();
		int length = points.length();
		Array coordinates = new Array();
		RowSetModel rmodel = new RowSetModel();
		int checkQ;
		
		for (int i=0;i<length;i++) {
			rmodel.setRows(dpObjContact.getContactRow(points.getItem(i)));
			rmodel.select(0,0);    //i have always only one element in the model because i take that by ID
			DataRow row = rmodel.getRow();
			coordinates.removeAllItems();
			coordinates = getPointCoordinates(row);
			checkQ = checkQuadrant(latitude,longitude,Platform.parseDouble(coordinates.getItem(0)),Platform.parseDouble(coordinates.getItem(1)));
			if (checkQ==quadrant) inQuadrant.addItem(points.getItem(i));
		}
		logApp.log(Log.INFO,"Quadrant " + quadrant + " - number of points: " + inQuadrant.length());
		return inQuadrant;
	}
	
	//returns latitude and longitude of an address of a row, in string format
	Array getPointCoordinates(DataRow row) {
		Array coor = new Array();
		String address = dpObjContact.ContactStreetAddress.getStringValue(row) + " " + dpObjContact.ContactStreetCity.getStringValue(row);
		coor.addItem(Platform.toString(nav.getLatitude(address)));
		coor.addItem(Platform.toString(nav.getLongitude(address)));
		return coor;
	}
	
	//returns an array with all row IDs of a rowset model
	Array getRowSetIDs(RowSetModel rsm) {
		Array arr = new Array();
		for (int j=0;j<rsm.getGroupCount();j++) {
			for (int i=0; i<rsm.getRowCount(j); i++) {
				rsm.select(j,i);
				DataRow row = rsm.getRow();
				arr.addItem(dpObjContact.ContactId.getStringValue(row));
			}	
		}
		return arr;
	}
	
	int checkQuadrant(double lat1, double lon1, double lat2, double lon2) {
		int quadrant;
		if (lat2>lat1) {
			if (lon2>lon1) quadrant = 0;
			else quadrant = 1;
		} else {
			if (lon2>lon1) quadrant = 3;
			else quadrant = 2;
		}
		return quadrant;
	}
	
	Array getInQuadrantPlan(double startLat, double startLon) {
		Array nearest = new Array();
		Array goTo = new Array();
		Array toVisitInQuadrant = new Array();
		Array plan = new Array();
		int quadrant;
		double goToLat;
		double goToLon;
		
		//calculate the nearest from my position
		nearest = calcNearest(allPoints,startLat,startLon);
		//add the first point to visit plan
		plan.addItem(nearest.getItem(0));
		allPoints.removeItem(nearest.getItem(0));
		//checking the quadrant of the point using my position as (0,0)
		quadrant = checkQuadrant(startLat,startLon,Platform.parseDouble(nearest.getItem(1)),Platform.parseDouble(nearest.getItem(2)));
		//find all points in quadrant
		toVisitInQuadrant = pointsInQuadrant(allPoints,quadrant,myLat,myLon);
		//calculate visit plan in the quadrant
		while (toVisitInQuadrant.length()>0) {
			if (goTo.length()>0) {
				//in goTo(0) we have the row ID, in 1 and 2 we ave latitude and longitude
				goToLat = Platform.parseDouble(goTo.getItem(1));
				goToLon = Platform.parseDouble(goTo.getItem(2));
				goTo.removeAllItems();
				goTo = calcNearest(toVisitInQuadrant,goToLat,goToLon);
				logApp.log(Log.INFO,"VisitPlan - Location added");
			} else {
				//it means that is the first cicle and we have to calculate the distance from my position
				goTo = calcNearest(toVisitInQuadrant,Platform.parseDouble(nearest.getItem(1)),Platform.parseDouble(nearest.getItem(2)));
			}
			plan.addItem(goTo.getItem(0));
			allPoints.removeItem(goTo.getItem(0));
			logApp.log(Log.INFO,"VisitPlan - Item added");
			toVisitInQuadrant.removeItem(goTo.getItem(0));
			//allPoints.removeItem(goTo.getItem(0));
			logApp.log(Log.INFO,"VisitPlan - toVisit - Item removed");
		}
		logApp.log(Log.INFO,"visitplan - quadrant plan finished, numbber of points in plan: " + plan.length());
		return plan;
	}
	
	Array rmArrayFromArray(Array master, Array toRemove) {
		if (toRemove.length()<=master.length()) {
			for (int i=0;i<toRemove.length();i++) {
				master.removeItem(toRemove.getItem(i));
			}
		}
		return master;
	}
	
	Array addArrayToArray(Array master, Array toAdd) {
		for (int i=0;i<toAdd.length();i++) {
			master.addItem(toAdd.getItem(i));
		}
		return master;
	}
}
