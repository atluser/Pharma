UIObject {
	
	Integer getEntityCode(String sEntityType)
	{
		int sCode = 0;
		if(sOpenDP==true)
		{
			PharmaDP.DataStore.CodiciEntita dpObjEntityCode = dp.CodiciEntita; //istanzio l''oggetto con i codici entità
			DataRowSet dpRowSetCode = dp.CodiciEntita.getRowSet(); //DataRowSet contenente gli account
			DataRow dtCode = null;
			
			if(dpRowSetCode.first()==null)
			{
				dtCode = dpObjEntityCode.getNewRow();
				dpObjEntityCode.CodiceAccount.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceContacts.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceEvents.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceListItem.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceLOV.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceOrder.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceOrderItem.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodicePriceList.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodicePriceListItem.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceProducts.setIntegerValue(Platform.createInteger(1),dtCode);
				dpObjEntityCode.CodiceProductList.setIntegerValue(Platform.createInteger(1),dtCode);
				sCode = 1;
			}
			else
			{
				dtCode = dpRowSetCode.first();
				if(sEntityType=="Account")
				{
					sCode = dpObjEntityCode.CodiceAccount.getIntegerValue(dtCode).intValue();
					sCode++;
					dpObjEntityCode.CodiceAccount.setIntegerValue(Platform.createInteger(sCode),dtCode);
				}
				
				if(sEntityType=="Contact")
				{
					sCode = dpObjEntityCode.CodiceContacts.getIntegerValue(dtCode).intValue();
					sCode++;
					dpObjEntityCode.CodiceContacts.setIntegerValue(Platform.createInteger(sCode),dtCode);
				}
				
				if(sEntityType=="Order")
				{
					sCode = dpObjEntityCode.CodiceOrder.getIntegerValue(dtCode).intValue();
					sCode++;
					dpObjEntityCode.CodiceOrder.setIntegerValue(Platform.createInteger(sCode),dtCode);
				}
			}
			dtCode.applyUpdates();
			dp.saveData();
		}
		return Platform.createInteger(sCode);
	}
	
	
	void loadAccount(){
		dpRowSetAccnt = dp.Account.getRowSet(); //Apro il rowset
		iNumAccounts = getDataRowSetSize(dpRowSetAccnt);
	}
	
	
	void loadContact() {
		dpRowSetContact = dp.Contact.getRowSet(); //Apro il rowset
		iNumContacts = getDataRowSetSize(dpRowSetContact);
	}
	
	void loadOrder() {
		dpRowSetOrder = dp.Order.getRowSet(); //Apro il rowset
		iNumOrder = getDataRowSetSize(dpRowSetOrder);
	}
	
	void loadOrderItem() {
		dpRowSetOrderItem = dp.OrderItem.getRowSet(); //Apro il rowset
		iNumOrderItem = getDataRowSetSize(dpRowSetOrderItem);
	}
	
	void loadPriceList(){
		dpRowSetPriceList = dp.PriceList.getRowSet(); //Apro il rowset
		if(dpRowSetPriceList.first()==null)
		{
			VOUtilityTemp vObjUtilTemp = new VOUtilityTemp();
			vObjUtilTemp.loadPriceList();
		}
		else
			iNumPriceList = getDataRowSetSize(dpRowSetPriceList);
	}
	
	void loadPriceListItem(){
		dpRowSetPriceListItem = dp.PriceListItem.getRowSet(); //Apro il rowset
		if(dpRowSetPriceListItem.first()==null)
		{
			VOUtilityTemp vObjUtilTemp = new VOUtilityTemp();
			vObjUtilTemp.loadPriceListItem();
		}
		else
			iNumPriceListItem = getDataRowSetSize(dpRowSetPriceListItem);
	}
	
	void loadLOV(){
		dpRowSetLOV = dp.ListOfValues.getRowSet(); //Apro il rowset
		if(dpRowSetLOV.first()==null)
		{
			VOUtilityTemp vObjUtilTemp = new VOUtilityTemp();
			vObjUtilTemp.loadLOV();
		}
		else
			iNumLOV = getDataRowSetSize(dpRowSetLOV);
	}
	
	void loadCrmEntities() {
		dpRowSetCrmEntity = dp.CrmEntity.getRowSet(); //Apro il rowset
		if(dpRowSetCrmEntity.first()==null)
		{
			VOUtilityTemp vObjUtilTemp = new VOUtilityTemp();
			vObjUtilTemp.loadCrmEntity();
		}
		else
			iNumCrmEntity = getDataRowSetSize(dpRowSetCrmEntity);
	}
	
	void loadEvent(){
		dpRowSetEvent = dp.Event.getRowSet(); //Apro il rowset
		if(dpRowSetEvent.first()==null)
		{
			VOUtilityTemp vObjUtilTemp = new VOUtilityTemp();
			vObjUtilTemp.loadEvent();
		}
		else
			iNumEvent = getDataRowSetSize(dpRowSetEvent);
	}
	
	void loadProducts(){
		dpRowSetProducts = dp.Products.getRowSet(); //Apro il rowset
		if(dpRowSetProducts.first()==null)
		{
			VOUtilityTemp vObjUtilTemp = new VOUtilityTemp();
			vObjUtilTemp.loadProducts();
		}
		else
			iNumProducts = getDataRowSetSize(dpRowSetProducts);
	}
	
	//mi rendo conto che è una porcata, ma non si riesce a fare andare il count... in futuro, ci riproveremo!
	int getDataRowSetSize(DataRowSet drs){
		int iNumRecord = 0;
		if(drs.first() == null)
			iNumRecord = 0;
		else{
			iNumContacts = 0;
			DataRow row = drs.first();
			while(row != null){
				if(row.isDeleted() == false)
					iNumRecord = iNumRecord + 1;
				row = drs.next();
			}
		}
		return iNumRecord;
	}
	
	DataRow getNewAccountRow(){
		String id=getEntityCode("Account").toString();
		DataRow row = dpObjAccount.getNewRow();		
        dpObjAccount.AccountId.setStringValue(id, row);
        dpObjAccount.AccountCode.setStringValue(id, row);
        dpObjAccount.AccountType.setStringValue("Prospect", row);        
        dpObjAccount.AccountStatus.setStringValue("Nuovo", row);
        return row;

	}
	
	DataRow getNewContactRow(){
		String id=getEntityCode("Contact").toString();
		DataRow row = dpObjContact.getNewRow();
		dpObjContact.ContactId.setStringValue(id, row);
		dpObjContact.ContactStatus.setStringValue("Nuovo",row);	
        return row  ;
	}
	
	DataRow getNewOrderRow(){
		String id=getEntityCode("Order").toString();
		DataRow row = dpObjOrder.getNewRow();
		dpObjOrder.OrderId.setStringValue(id, row);
        return row;
	}
	
	DataRow insertListItem(String orderCode,String productCode, String productName,String  category,String image, Double unitPrice){

		DataRow dt = dpObjListItem.getNewRow();

		dpObjListItem.ProductCode.setStringValue(productCode,dt);
		dpObjListItem.OrderCode.setStringValue(orderCode,dt);
		dpObjListItem.ProductName.setStringValue(productName,dt);
		dpObjListItem.ProductImage.setStringValue(image,dt);
		dpObjListItem.ProductCategory.setStringValue(category,dt);
		dpObjListItem.UnitPrice.setCurrencyValue(unitPrice,dt);				
		//canvassDetailObj.MinQty.setIntegerValue(Platform.createInteger(minQty),dt);
		//canvassDetailObj.Image.setStringValue(image,dt);
		dt.applyUpdates();
		dp.saveData();
		return dt;

	}

	double getOrderTotalGross(String orderCode){
		Query q=dpObjOrderItem.getOrderItem(orderCode);
		double sum=0.0;
		if(q!=null){
			DataRowSet set=q.getRowSet();
			DataRow found=set.first();			
			while(found!=null){
				sum=sum+dpObjOrderItem.OrderItemTotalGross.getCurrencyValue(found).doubleValue();
				found=set.next();
			}			
		}
		return sum;
	}
	double getOrderTotalNet(String orderCode){
		Query q=dpObjOrderItem.getOrderItem(orderCode);
		double sum=0.0;
		if(q!=null){
			DataRowSet set=q.getRowSet();
			DataRow found=set.first();			
			while(found!=null){
				sum=sum+dpObjOrderItem.OrderItemTotalNet.getCurrencyValue(found).doubleValue();
				found=set.next();
			}			
		}
		return sum;
	}
	void loadImage(){
		productImageMap.putValue("Supradin",Images.Products.Supradin);
		productImageMap.putValue("Lasonil",Images.Products.Lasonil);
		productImageMap.putValue("Sanipirina",Images.Products.Sanipirina);
		productImageMap.putValue("Lenitos",Images.Products.Lenitos);
		productImageMap.putValue("Aspirina",Images.Products.Aspirina);
		productImageMap.putValue("Lenigola",Images.Products.Lenigola);
		productImageMap.putValue("Defenflu",Images.Products.Defenflu);	
	}
	
	String getAccountName(String accountId){
		Query q=dpObjAccount.getAccountRow(accountId);
		DataRow row=q.getRowSet().first();
		String accountName="";
		if(row!=null)
			accountName=dpObjAccount.AccountName.getStringValue(row);
		
		return accountName;		
	}
	
	 DataRow getNewOrder(String accountCode){
		
		DataRow dt = dpObjOrder.getNewRow();
				
		dpObjOrder.AccountCode.setStringValue(accountCode,dt);
		dpObjOrder.OrderCode.setStringValue(Platform.toString(Platform.createDate().getTime()),dt);
		dpObjOrder.OrderStatus.setStringValue("Bozza",dt);
		dpObjOrder.OrderDate.setDateValue(Platform.createDate(),dt);
		dpObjOrder.Order1stDeliveryDate.setDateValue(Platform.createDate(Platform.getCurrentTime()+86400000),dt);
//		dpObjOrder.Type.setStringValue("Sales");
		
		dt.applyUpdates();	
		return dt;	
			
	}
	
	DataRow getNewContact(String accountCode){
		
		int id=dpObjContact.createQuery().getRowSet().getSize()+1;
		DataRow row = dpObjContact.getNewRow();
		dpObjContact.ContactId.setStringValue(""+id, row);
		//dpObjContact.ContactStreetCity.setStringValue("Città",row);	
		dpObjContact.ContactStatus.setStringValue("Nuovo",row);	
		dpObjContact.RelAccountCode.setStringValue(accountCode,row);
        //row.applyUpdates();
        return row  ;
			
	}
/*	
	void setItem(String orderCode,String productCode,String description,String productName, Integer qty,String unitPrice){
		
		DataRow dt = itemObj.getNewRow();
		
		itemObj.Qty.setIntegerValue(qty,dt);
		itemObj.ProductCode.setStringValue(productCode,dt);
		itemObj.Description.setStringValue(description,dt);
		itemObj.ProductName.setStringValue(productName,dt);
		itemObj.OrderCode.setStringValue(orderCode,dt);
		itemObj.UnitPrice.setStringValue(unitPrice,dt);
		
		dt.applyUpdates();	
			
	}
	*/
	void insertList(String code,String description,int minQty){
		DataRow dt = dpObjPriceList.getNewRow();		
		dpObjPriceList.PriceListCode.setStringValue(code,dt);
		dpObjPriceList.PriceListDescription.setStringValue(description,dt);		
		dt.applyUpdates();
		
		dp.saveData();
		
	}
	
		/*
	void loadList(){
		
		insertList("0","Speciale Prive",10);
		insertListItem("0","01tA0000003HQs3","HC7 cl.70","HAVANA CLUB","10",3,"https://c.na7.content.force.com/servlet/servlet.FileDownload?file=015A0000001jkrN");
		insertListItem("0","01tA0000003HRPB","ABSOLUT VODKA cl 70","ABSOLUT VODKA","15",0,"https://c.na7.content.force.com/servlet/servlet.FileDownload?file=015A0000001jkrD");
		insertListItem("0","01tA0000003HSj7","BEEFEATER 24","BEEFEATER","15",0,"");
		insertListItem("0","01tA0000003HSj2","MALIBU","MALIBU","10",0,"");
		insertListItem("0","01tA0000003HRPB","ABSOLUT VODKA cl 70","ABSOLUT VODKA","0",3,"");
		
		insertList("1","Super Prive",20);
		insertListItem("1","01tA0000003HRPB","ABSOLUT VODKA cl 70","ABSOLUT VODKA","15",0,"");
		insertListItem("1","01tA0000003HSj7","BEEFEATER 24","BEEFEATER","15",0,"");
		insertListItem("1","01tA0000003HSj2","MALIBU","MALIBU","10",0,"");
		insertListItem("1","01tA0000003HQs3","HC7 cl.70","HAVANA CLUB","10",6,"");
		insertListItem("1","01tA0000003HQs8","HC7 cl.300","HAVANA CLUB","0",1,"");
		
		//insertCanvass("C","TEST",0);
	}
*/

	String getContactName(String contactId){
		Query q=dpObjContact.getContactRow(contactId);
		DataRow row=q.getRowSet().first();
		String contactName="";
		if(row!=null)
			contactName=dpObjContact.ContactName.getStringValue(row);
		
		return contactName;		
	}
}