Screen {
	
	MapField mapField=new MapField();
	Action actClose = new Action();
	RowSetModel rsm = new RowSetModel();
	
	callback applyVisualStyle(Widget widget, StyleReceptor styleReceptor){
		//TODO: add code
	}

	callback onActivate(Container container){
		//TODO: add code
	}

	callback onBeginChangeFromFullScreen(Screen screen, Container container){
		//TODO: add code
	}

	callback onBeginChangeToFullScreen(Screen screen, Container container){
		//TODO: add code
	}

	callback onClose(Container container){
		//TODO: add code
	}

	callback onCreate(Container container){
		
		rsm.setRows(dpObjContact.getContacts());
		
		/*
		 *	 DataRow row = rsm.getRow();
		 *	logApp.log(Log.INFO, "Contact - MapScreen - rows number: " + rsm.getRowCount(0));
		 *	if (row==null) {
		 *		logApp.log(Log.INFO, "Contact - MapScreen - Empty Row Set Model");
		 *	}
		 *	if (rsm.hasRow()) {
		 *		logApp.log(Log.INFO, "Contact - MapScreen - Row Set Model HAS ROWS");
		 *	} else {
		 *		logApp.log(Log.INFO, "Contact - MapScreen - Row Set Model HAS NOT ROWS");
		 *	}
		 *	while (row!=null) {
		 *		dpObjContact.ContactName.getStringValue(row);
		 *		logApp.log(Log.INFO, "Contact - MapScreen - Row Name: " + dpObjContact.ContactName.getStringValue(row));
		 *	}
		*/
		//mapField.clearLocations();
		for (int i=0; i<rsm.getRowCount(0); i++) {
			rsm.select(0,i);
			DataRow row = rsm.getRow();
			logApp.log(Log.INFO, "Contact - MapScreen - Row Name: " + dpObjContact.ContactName.getStringValue(row));
			MapAnnotation mapAnot = new MapAnnotation();
			mapAnot.setShowCallout(true);
			mapAnot.setEnabled(true);
			mapAnot.setTitle(dpObjContact.ContactName.getStringValue(row) + " " + dpObjContact.ContactLastName.getStringValue(row));
			mapAnot.setSubTitle(dpObjContact.ContactEmail.getStringValue(row));
			mapAnot.setImageType(MapAnnotation.IMAGE_TYPE_DEFAULT);
			mapField.addLocation(dpObjContact.ContactStreetAddress.getStringValue(row),"",dpObjContact.ContactStreetCity.getStringValue(row),dpObjContact.ContactCap.getStringValue(row),dpObjContact.ContactCountry.getStringValue(row),mapAnot);
		}
		
		//mapField.addLocation("madonnina del grappa","","lombardia","20025","Italia");		
		add(mapField,"vfill=fill,hfill=fill");
		
		Menu mn = new Menu();
		actClose.setText("Close");
		mn.add(actClose);
		setMenu(mn);
	}

	callback onDeactivate(Container container){
		//TODO: add code
	}

	callback onEndChangeFromFullScreen(Screen screen, Container container){
		//TODO: add code
	}

	callback onEndChangeToFullScreen(Screen screen, Container container){
		//TODO: add code
	}

	callback onEndOrientationChange(Screen screen, int int_){
		//TODO: add code
	}

	callback onInputEvent(Screen screen, InputEvent inputEvent){
		//TODO: add code
	}

	callback onMenuDisplay(Screen screen){
		//TODO: add code
	}

	callback onOpen(Container container){
		//TODO: add code
	}

	callback onOrientationLayoutChange(Screen screen, int int_){
		//TODO: add code
	}

	callback onScreenKeyboardVisibilityChange(Screen screen, boolean boolean_){
		//TODO: add code
	}

	callback onScreenOrientationChange(Screen screen, int int_){
		//TODO: add code
	}

	callback onScreenOrientationChange(Screen screen, int int_, int int_1){
		//TODO: add code
	}

	callback onStartOrientationChange(Screen screen, int int_){
		//TODO: add code
	}

	
	//Custom Methods
	void setMap(String contactName, String refer,String street,String city, String region, String postalcode,String country){
		MapAnnotation mapAnot = new MapAnnotation();
		mapAnot.setShowCallout(true);
		mapAnot.setEnabled(true);
		mapAnot.setTitle(contactName);
		mapAnot.setSubTitle(refer);
		mapAnot.setImageType(MapAnnotation.IMAGE_TYPE_DEFAULT);
		mapField.clearLocations();
		mapField.addLocation(street,"",region,postalcode,country,mapAnot);
	}
}
